import{_ as p,C as l,o as t,c as r,k as s,a as n,t as o,H as c,w as i,Q as y}from"./chunks/framework.fa3e7808.js";const j=JSON.parse('{"title":"Wąż w kieszeni","description":"Python jako język programowania uważany jest za bardzo czytelny i samo opisujący się. Charakteryzuje się bardzo zwięzłą formą. Wiele osób miało już okazje rozpisywać się o składni i semantyce tego języka. Ja pójdę krok dalej. Wykorzystam wpływy krakowskie i poznańskie aby zaprzyjaźnić węża z kieszeni z Pythonem - spróbuje zaprezentować minimalizacje już minimalistycznego kodu.","frontmatter":{"author":"Jakub Spórna","title":"Wąż w kieszeni","description":"Python jako język programowania uważany jest za bardzo czytelny i samo opisujący się. Charakteryzuje się bardzo zwięzłą formą. Wiele osób miało już okazje rozpisywać się o składni i semantyce tego języka. Ja pójdę krok dalej. Wykorzystam wpływy krakowskie i poznańskie aby zaprzyjaźnić węża z kieszeni z Pythonem - spróbuje zaprezentować minimalizacje już minimalistycznego kodu.","date":"2021-01-09"},"headers":[],"relativePath":"blog/waz-w-kieszeni.md","filePath":"blog/waz-w-kieszeni.md"}'),E={name:"blog/waz-w-kieszeni.md"},d={id:"frontmatter-title",tabindex:"-1"},u=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),m=y(`<h2 id="inspiracja" tabindex="-1">Inspiracja <a class="header-anchor" href="#inspiracja" aria-label="Permalink to &quot;Inspiracja&quot;">​</a></h2><p>Ostatnimi czasy <strong>Maciek Kusz</strong> z bloga <a href="https://testerembyc.pl/" target="_blank" rel="noreferrer">testerembyc.pl</a> pochylił się nad frameworkiem do testów w ramach 16 linii kodu. Swoje rozwiązanie stopniował i wzbogacał funkcjonalnie z zachowaniem założonego limitu. Nie ukrywam miałem swój wpływ na kod ale tylko od strony składniowo-semantycznej bez ingerencji w funkcjonalność.</p><h2 id="_3-grosze" tabindex="-1">3 grosze <a class="header-anchor" href="#_3-grosze" aria-label="Permalink to &quot;3 grosze&quot;">​</a></h2><p>Swój wpływ udokumentowałem w <a href="https://github.com/jsporna/the_smallest_rest_api_testing_framework" target="_blank" rel="noreferrer">forku repozytorium</a> <strong>Maćka</strong>. Przybliżę w tym miejscu swoje zmiany:</p><p>Jako, że plik z kodem będzie uruchamiany a nie importowany to sprawdzanie czy to jest uruchomiony skrypt jest kodem nadmiarowym. Uważam, że ta zmiana nie wymaga większego komentarza.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;__main__&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    unittest.main(</span><span style="color:#FFAB70;">testRunner</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">xmlrunner.XMLTestRunner())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    unittest.main(</span><span style="color:#E36209;">testRunner</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">xmlrunner.XMLTestRunner())</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">unittest.main(</span><span style="color:#FFAB70;">testRunner</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">xmlrunner.XMLTestRunner())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">unittest.main(</span><span style="color:#E36209;">testRunner</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">xmlrunner.XMLTestRunner())</span></span></code></pre></div><hr><p>Większa zamiana dotyczy zastąpienia definicji funkcji na lambdę.<br> Pierwotnie była zdefiniowana funkcja, która zawierała w sobie definicję funkcji wewnętrznej wykorzystanej do tworzenia atrybutu w ramach przekazanej instancji klasy.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add_test</span><span style="color:#E1E4E8;">(cls, name, data):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">abstract_test</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.assertEqual(requests.request(</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">data[</span><span style="color:#9ECBFF;">&#39;request&#39;</span><span style="color:#E1E4E8;">]).status_code, data[</span><span style="color:#9ECBFF;">&#39;assert&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;statusCode&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">setattr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cls</span><span style="color:#E1E4E8;">, name, abstract_test)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add_test</span><span style="color:#24292E;">(cls, name, data):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">abstract_test</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.assertEqual(requests.request(</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">data[</span><span style="color:#032F62;">&#39;request&#39;</span><span style="color:#24292E;">]).status_code, data[</span><span style="color:#032F62;">&#39;assert&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;statusCode&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">setattr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cls</span><span style="color:#24292E;">, name, abstract_test)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">setattr</span><span style="color:#E1E4E8;">(Tests, test_name, </span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> self: </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.assertEqual(requests.request(</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">test_data[</span><span style="color:#9ECBFF;">&#39;request&#39;</span><span style="color:#E1E4E8;">]).status_code, test_data[</span><span style="color:#9ECBFF;">&#39;assert&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;statusCode&#39;</span><span style="color:#E1E4E8;">]))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">setattr</span><span style="color:#24292E;">(Tests, test_name, </span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> self: </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.assertEqual(requests.request(</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">test_data[</span><span style="color:#032F62;">&#39;request&#39;</span><span style="color:#24292E;">]).status_code, test_data[</span><span style="color:#032F62;">&#39;assert&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;statusCode&#39;</span><span style="color:#24292E;">]))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> data: </span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> self: </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.assertEqual(requests.request(</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">data[</span><span style="color:#9ECBFF;">&#39;request&#39;</span><span style="color:#E1E4E8;">]).status_code, data[</span><span style="color:#9ECBFF;">&#39;assert&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;statusCode&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#79B8FF;">setattr</span><span style="color:#E1E4E8;">(Tests, test_name, func(test_data))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> data: </span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> self: </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.assertEqual(requests.request(</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">data[</span><span style="color:#032F62;">&#39;request&#39;</span><span style="color:#24292E;">]).status_code, data[</span><span style="color:#032F62;">&#39;assert&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;statusCode&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#005CC5;">setattr</span><span style="color:#24292E;">(Tests, test_name, func(test_data))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Była ona wywoływana w ramach pętli:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;tests.json&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> jfile:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> test_name, test_data </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> json.load(jfile).items():</span></span>
<span class="line"><span style="color:#E1E4E8;">        add_test(Tests, test_name, test_data)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;tests.json&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> jfile:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> test_name, test_data </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> json.load(jfile).items():</span></span>
<span class="line"><span style="color:#24292E;">        add_test(Tests, test_name, test_data)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Zastąpienie funkcji wewnętrznej poprzez lambdę, która została umieszczona w wywołaniu funkcji <strong>settattr</strong> pozwoliło zaoszczędzić kilka linii kodu bez utraty funkcjonalności.<br> Niestety pojawił się tu mały problem. Pomimo pętli na danych lambda została utworzona raz a przekazywane do jej wnętrza zmienne zostały przekazane poprzez referencję a nie wartość. Skutkiem tego jest utworzenie atrybutów o tych samych wartościach - wartościach wczytanych w ostatnim przebiegu pętli <strong>for</strong>.<br> Rozwiązaniem na to jest wydzielenie lambdy do osobnej linii i obudowanie jej w kolejną lambdę. Pozwala to na przekazania niezbędnych zmiennych poprzez wartość. W ten sposób do funkcji <strong>setattr</strong> jest przekazane wywołanie lambdy, która zwraca niezbędny wywoływalny obiekt oczekiwany przez tą funkcję.</p><hr><p>Kolejna optymalizacja nastąpiła już na kodzie, który Maciek wzbogacił o dodatkowe funkcjonalności.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> file_name </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> glob.iglob(</span><span style="color:#9ECBFF;">&quot;*.json&quot;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(file_name, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> json_file:</span></span>
<span class="line"><span style="color:#E1E4E8;">        test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> data: </span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> self: abstract_test(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">, data)</span></span>
<span class="line"><span style="color:#E1E4E8;">        suite_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> file_name.split(</span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">globals</span><span style="color:#E1E4E8;">()[suite_name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;">(suite_name, (unittest.TestCase,), {name: test(data) </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> name, data </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> json.load(json_file).items()})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> file_name </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> glob.iglob(</span><span style="color:#032F62;">&quot;*.json&quot;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(file_name, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> json_file:</span></span>
<span class="line"><span style="color:#24292E;">        test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> data: </span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> self: abstract_test(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, data)</span></span>
<span class="line"><span style="color:#24292E;">        suite_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> file_name.split(</span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">globals</span><span style="color:#24292E;">()[suite_name] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">type</span><span style="color:#24292E;">(suite_name, (unittest.TestCase,), {name: test(data) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> name, data </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> json.load(json_file).items()})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> data: </span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> self: abstract_test(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">, data, requests.request(</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">data[</span><span style="color:#9ECBFF;">&#39;request&#39;</span><span style="color:#E1E4E8;">]))</span></span>
<span class="line"><span style="color:#79B8FF;">globals</span><span style="color:#E1E4E8;">().update({file_name: </span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;">(file_name, (unittest.TestCase, ), {name: test(data) </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> name, data </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> json.load(</span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(file_name, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">)).items() }) </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> file_name </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> glob.iglob(</span><span style="color:#9ECBFF;">&quot;*.json&quot;</span><span style="color:#E1E4E8;">)})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> data: </span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> self: abstract_test(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, data, requests.request(</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">data[</span><span style="color:#032F62;">&#39;request&#39;</span><span style="color:#24292E;">]))</span></span>
<span class="line"><span style="color:#005CC5;">globals</span><span style="color:#24292E;">().update({file_name: </span><span style="color:#005CC5;">type</span><span style="color:#24292E;">(file_name, (unittest.TestCase, ), {name: test(data) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> name, data </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> json.load(</span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(file_name, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">)).items() }) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> file_name </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> glob.iglob(</span><span style="color:#032F62;">&quot;*.json&quot;</span><span style="color:#24292E;">)})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Od czego wyszliśmy? Iteracja po plikach, które są otwierane poprzez <strong>context managera</strong>, przygotowanie lambdy (<strong>test</strong>) oraz nazwy dla klasy (<strong>suite_name</strong>) oraz dopisywanie do słownika <strong>globals()</strong> nowych instancji klasy dziedziczącej po <strong>unittest.TestCase</strong>. Tworzenie instancji klasy zawiera w sobie <strong>dict comprehension</strong>, które iteruje po zawartości wczytanego pliku.</p><p>Oszczędność została osiągnięta poprzez zagnieżdżenie <strong>list comprehension</strong> w <strong>dict comprehension</strong> oraz kolejne zagnieżdżenie w <strong>dict comprehension</strong>.<br> Idąc od najbardziej wewnętrznej struktury - <strong>list comprehension</strong> zastępuje zewnętrzną pętlę for.<br> Jest ona zagnieżdżona w <strong>dict comprehension</strong> odpowiedzialnym za iteracje po danych wczytanych z plików czyli rozszerzyliśmy oryginalną strukturę. Kolejno został dodany zewnętrzny <strong>dict comprehension</strong> w celu wygenerowania słownika, którym rozszerzymy <strong>globals()</strong> zamiast dopisywać pojedyncze klucze i ich wartości.</p><h3 id="rachunek" tabindex="-1">Rachunek <a class="header-anchor" href="#rachunek" aria-label="Permalink to &quot;Rachunek&quot;">​</a></h3><p>Dwukrotnie udało wspólnymi siłami zredukować kod z 15/16 do 10 linii.</p><h2 id="_9-groszy" tabindex="-1">9 groszy <a class="header-anchor" href="#_9-groszy" aria-label="Permalink to &quot;9 groszy&quot;">​</a></h2><h3 id="mamy" tabindex="-1">Mamy <a class="header-anchor" href="#mamy" aria-label="Permalink to &quot;Mamy&quot;">​</a></h3><p>Mieliśmy funkcje bez funkcji - lambda.<br> Mieliśmy klasę bez definicji - type -&gt; <a href="https://testerembyc.pl/posts/jeszcze-mniejszy-framework-do-testow-w-pythonie/#type" target="_blank" rel="noreferrer">opis Maćka</a>.<br> Mieliśmy instancje klasy bez klasy - setattr.<br> Mieliśmy globalne obiekty bez obiektów - globals().</p><h3 id="co-jeszcze" tabindex="-1">Co jeszcze? <a class="header-anchor" href="#co-jeszcze" aria-label="Permalink to &quot;Co jeszcze?&quot;">​</a></h3><p>Co tu jeszcze można dodać bez dodawania?<br> Odwróciłem rozwiązanie Maćka o 180° i postanowiłem stworzyć REST API w jak najmniejszej linii kodu a zarazem żeby było w pełni funkcjonalne - funkcjonalnością odpowiadało testom wykonywanym przez framework. Wykorzystałem do tego framework <a href="https://fastapi.tiangolo.com/" target="_blank" rel="noreferrer">fastapi</a>. Ale co tu jest innego niż do tej pory było? Będziemy generować funkcje, które posiadają dekorator czyli funkcję, której argumentem staje się udekorowana funkcja.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> fastapi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fastapi.FastAPI()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Hello from FastAPI&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fastapi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fastapi.FastAPI()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Hello from FastAPI&quot;</span><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="pierwsze-spojrzenie" tabindex="-1">Pierwsze spojrzenie <a class="header-anchor" href="#pierwsze-spojrzenie" aria-label="Permalink to &quot;Pierwsze spojrzenie&quot;">​</a></h3><p>No to można powiedzieć, jak mamy funkcję dekoratora no to problem z głowy.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.get(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;">: {</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Hello from FastAPI&quot;</span><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.get(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;">: {</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Hello from FastAPI&quot;</span><span style="color:#24292E;">})</span></span></code></pre></div><p>Niestety to nie zadziała ponieważ ani funkcja <strong>app.get()</strong> ani funkcja przez nią zwracana <strong>app.router.post()</strong> nie posiada jako argument funkcji dekorowanej.</p><h3 id="otchłan" tabindex="-1">Otchłań <a class="header-anchor" href="#otchłan" aria-label="Permalink to &quot;Otchłań&quot;">​</a></h3><p>Idąc po nici do kłębka możemy się dowiedzieć, że <strong>app.router</strong> jest instancją <strong>fastapi.routing.APIRouter</strong>.<br> No to schodzimy niżej i fedrujemy. Klasa <strong>APIRouter</strong> w swoich metodach posiada wspomnianą funkcję <strong>get</strong>, która natomiast zwraca funkcje <strong>api_route</strong>, która nadal nie posiada argumentu dla dekorowanej funkcji. Dopiero ta ostatnia zwraca funkcję <strong>add_api_route</strong>, której drugim argumentem jest szukane <strong>func</strong>. Sukces!</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.get() → fastapi.FastAPI.get()</span></span>
<span class="line"><span style="color:#E1E4E8;">↓</span></span>
<span class="line"><span style="color:#E1E4E8;">app.router.get() → fastapi.routing.APIRouter.get()</span></span>
<span class="line"><span style="color:#E1E4E8;">↓</span></span>
<span class="line"><span style="color:#E1E4E8;">app.router.api_route() → fastapi.routing.APIRouter.api_route()</span></span>
<span class="line"><span style="color:#E1E4E8;">↓</span></span>
<span class="line"><span style="color:#E1E4E8;">app.router.add_api_route() → fastapi.routing.APIRouter.add_api_route()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.get() → fastapi.FastAPI.get()</span></span>
<span class="line"><span style="color:#24292E;">↓</span></span>
<span class="line"><span style="color:#24292E;">app.router.get() → fastapi.routing.APIRouter.get()</span></span>
<span class="line"><span style="color:#24292E;">↓</span></span>
<span class="line"><span style="color:#24292E;">app.router.api_route() → fastapi.routing.APIRouter.api_route()</span></span>
<span class="line"><span style="color:#24292E;">↓</span></span>
<span class="line"><span style="color:#24292E;">app.router.add_api_route() → fastapi.routing.APIRouter.add_api_route()</span></span></code></pre></div><p>I co teraz z tym możemy zrobić? Bardzo wiele.<br> Poczynając od określenia ścieżki (<strong>path</strong>), metod (<strong>methods</strong>), kodu odpowiedzi (<strong>status_code</strong>), możemy określić model odpowiedzi (<strong>response_model</strong>) i wiele meta parametrów odpowiedzialnych za opis słowno-muzyczny.</p><h3 id="piekło-czy-niebo" tabindex="-1">Piekło czy Niebo <a class="header-anchor" href="#piekło-czy-niebo" aria-label="Permalink to &quot;Piekło czy Niebo&quot;">​</a></h3><p>Docelowo otrzymujemy:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.router.add_api_route(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;">: {</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Hello from FastAPI&quot;</span><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.router.add_api_route(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;">: {</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Hello from FastAPI&quot;</span><span style="color:#24292E;">})</span></span></code></pre></div><p>Tworząc strukturę dla endpointów podobną do tej dla testów:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">str</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;methods&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">List</span><span style="color:#E1E4E8;">[</span><span style="color:#FDAEB7;font-style:italic;">str</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;status_code&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">int</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;returns&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">List</span><span style="color:#E1E4E8;">[</span><span style="color:#FDAEB7;font-style:italic;">str</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;path&quot;</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">str</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;methods&quot;</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">List</span><span style="color:#24292E;">[</span><span style="color:#B31D28;font-style:italic;">str</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;status_code&quot;</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">int</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;returns&quot;</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">List</span><span style="color:#24292E;">[</span><span style="color:#B31D28;font-style:italic;">str</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Jesteśmy wstanie stworzyć działające REST API serwis dosłownie w kilku liniach kodu:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> fastapi, json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fastapi.FastAPI()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> name, values </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> json.load(</span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;routes.json&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;r&quot;</span><span style="color:#E1E4E8;">)).items():</span></span>
<span class="line"><span style="color:#E1E4E8;">   func </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> data: </span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;">: {item: item </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> data}</span></span>
<span class="line"><span style="color:#E1E4E8;">   app.router.add_api_route(values[</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">], func(values.get(</span><span style="color:#9ECBFF;">&#39;returns&#39;</span><span style="color:#E1E4E8;">, [])), </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">name, </span><span style="color:#FFAB70;">methods</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">values[</span><span style="color:#9ECBFF;">&#39;methods&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">status_code</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">values[</span><span style="color:#9ECBFF;">&#39;status_code&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fastapi, json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fastapi.FastAPI()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> name, values </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> json.load(</span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;routes.json&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;r&quot;</span><span style="color:#24292E;">)).items():</span></span>
<span class="line"><span style="color:#24292E;">   func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> data: </span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;">: {item: item </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> data}</span></span>
<span class="line"><span style="color:#24292E;">   app.router.add_api_route(values[</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">], func(values.get(</span><span style="color:#032F62;">&#39;returns&#39;</span><span style="color:#24292E;">, [])), </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">name, </span><span style="color:#E36209;">methods</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">values[</span><span style="color:#032F62;">&#39;methods&#39;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">status_code</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">values[</span><span style="color:#032F62;">&#39;status_code&#39;</span><span style="color:#24292E;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Można z linii 5 i 7 zrobić list comprehension.<br> Funkcje add_api_route możemy zamienić na operacjach na liście app.router.routes.<br> ...</p><h3 id="napiwek" tabindex="-1">Napiwek <a class="header-anchor" href="#napiwek" aria-label="Permalink to &quot;Napiwek&quot;">​</a></h3><p>Tu nasuwa się pytanie czy jaka &quot;optymalizacja&quot; nie ma końca? Co tym osiągniemy: programistyczne Piekło czy Niebo?</p><p>Nie jest sztuka dla sztuki! W dobie gdzie wszystko jest w Internecie, jest online ogrom danych jest pobieranych, przetwarzanych uruchamianych. Ciągły rozwój zapewnia coraz szybszy i szerszy dostęp do sieci Internet ale są miejsca gdzie kod jest limitowany.</p><p>Za przykład posłuży mi <a href="https://aws.amazon.com/lambda/" target="_blank" rel="noreferrer">AWS Lambda</a>.<br> Posiada ona limit 50MB spakowanego kodu, 250MB rozpakowanego kodu, 3MB edytor w konsoli. 250MB to ogrom ale AWS Lambda liczy nie tylko kod napisany przez nas ale również wszystkie moduły niezbędne do uruchomienia tego kodu.<br> Za przykład niech posłuży moje 7 linii kodu - to jedyne 324B. Natomiast wszystkie niezbędne moduły to już 88MB.</p><p>Kiedy zależności doprowadzą nas do limitu to optymalizować / minimalizować możemy już tylko swój kod.</p><h2 id="_10-groszy" tabindex="-1">10 groszy <a class="header-anchor" href="#_10-groszy" aria-label="Permalink to &quot;10 groszy&quot;">​</a></h2><p>Jedna rzecz nie została utworzona w sposób generyczny: <strong>funkcja z dynamiczną listą argumentów</strong>. A to już nie jest obszar gdzie ubywa kodu, wręcz przeciwnie to tu kod płynie szerokim strumieniem.<br> Czym to możemy osiągnąć? Python w swojej standardowej bilbiotece ma moduł <strong>inspect</strong> a w nim jest klasa <strong>Signature</strong>.</p><p>Ale już więcej nie powiem. Pozostawiam do zgłębienia dla chętnych i szczerze potrzebujących takiego podejścia.</p>`,53);function z(a,b,h,g,k,F){const e=l("Quote");return t(),r("div",null,[s("h1",d,[n(o(a.$frontmatter.title)+" ",1),u]),c(e,{author:"Ernst Friedrich Schumacher"},{default:i(()=>[n(" Małe jest piękne. ")]),_:1}),s("p",null,o(a.$frontmatter.description),1),m])}const f=p(E,[["render",z]]);export{j as __pageData,f as default};
